@page "/vendas/novo"
@using EcommerceFrontBlazor.Models.VendaModels
@using EcommerceFrontBlazor.Models.ProdutoModels
@using EcommerceFrontBlazor.Models.VendaModels
@using EcommerceFrontBlazor.Models.ClienteModels
@using EcommerceFrontBlazor.Services
@inject VendaService VendaService
@inject ClienteService ClienteService
@inject ProdutoService ProdutoService
@inject NavigationManager NavigationManager

<h3>Cadastrar Nova Venda</h3>

<EditForm Model="novaVenda" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Cliente:</label>
        <InputSelect class="form-control" @bind-Value="novaVenda.ClienteId">
            <option value="">Selecione um cliente</option>
            @foreach (var cliente in clientes)
            {
                <option value="@cliente.Id">@cliente.Nome</option>
            }
        </InputSelect>
    </div>

    <div class="form-group mt-3">
        <label>Produtos:</label>
        @foreach (var produto in produtos)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @onchange="e => SelecionarProduto(e, produto.Id)" />
                <label class="form-check-label">
                    @produto.Nome (@produto.Preco.ToString("C"))
                </label>
                <InputNumber class="form-control mt-1" placeholder="Quantidade" @bind-Value="quantidades[produto.Id]" />
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary mt-3">Cadastrar Venda</button>
    <button type="button" class="btn btn-secondary mt-3 ms-2" @onclick="Voltar">Voltar</button>
</EditForm>

@code {
    private CreateVenda novaVenda = new CreateVenda();
    private List<Cliente> clientes = new();
    private List<Produto> produtos = new();
    private Dictionary<Guid, int> quantidades = new(); 
    private List<Guid> produtosSelecionados = new();

    protected override async Task OnInitializedAsync()
    {
        clientes = await ClienteService.GetClientesAsync();
        produtos = await ProdutoService.GetProdutosAsync();
    }

    private void SelecionarProduto(ChangeEventArgs e, Guid produtoId)
    {
        var selecionado = (bool)e.Value;
        if (selecionado)
        {
            produtosSelecionados.Add(produtoId);
        }
        else
        {
            produtosSelecionados.Remove(produtoId);
        }
    }

    private async Task HandleValidSubmit()
    {
        novaVenda.Produtos = produtosSelecionados
            .Select(produtoId => new ProdutosVendidos
                {
                    ProdutoId = produtoId,
                    Quantidade = quantidades.ContainsKey(produtoId) ? quantidades[produtoId] : 1
                })
            .ToList();

        await VendaService.CreateVendaAsync(novaVenda);
        NavigationManager.NavigateTo("/vendas");
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/vendas");
    }
}
